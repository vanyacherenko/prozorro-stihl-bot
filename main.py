import requests
import time
import os
from datetime import datetime, timezone
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –°–ø–∏—Å–æ–∫ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫–∏–º –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
CHAT_IDS = [
    "1971727077",  # ‚Üê —Ç–≤–æ—î
    "7981671066",  # ‚Üê –¥–æ–¥–∞—î—à –Ω–æ–≤–∏—Ö —Å—é–¥–∏
]

CHECK_INTERVAL = 30        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫
STATUS_INTERVAL = 86400    # –†–∞–∑ –Ω–∞ –¥–æ–±—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ "–ü—Ä–æ–≥—Ä–∞–º–∞ –ø—Ä–∞—Ü—é—î"
TARGET_REGION = "—á–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"

# –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É
KEYWORDS = [
    "stihl", "—à—Ç–∏–ª—å", "—à—Ç–∏–ª—å —É–∫—Ä–∞—ó–Ω–∞", "–±–µ–Ω–∑–æ–ø–∏–ª–∞", "–º–æ—Ç–æ–ø–∏–ª–∞", "chainsaw",
    "ms 170", "ms 180", "ms 211", "ms 230", "ms 250", "ms 260", "ms 261",
    "ms 271", "ms 290", "ms 311", "ms 361", "ms 362", "ms 391", "ms 400",
    "ms 441", "ms 461", "ms 462", "ms 500", "ms 500i", "ms 661", "ms 880",
    "msa 120", "msa 140", "msa 160", "msa 200", "msa 220", "–º–æ—Ç–æ–∫–æ—Å–∞", "–∫–æ—Å–∞",
    "trimmer", "—Ç—Ä–∏–º–µ—Ä", "fs 38", "fs 55", "fs 70", "fs 94", "fs 120", "fs 131",
    "fs 250", "fs 260", "fs 360", "fs 410", "fs 460", "fs 490", "–∫—É—â–æ—Ä—ñ–∑",
    "hs 45", "hs 56", "hs 82", "hs 87", "–≤–∏—Å–æ—Ç–æ—Ä—ñ–∑", "ht 75", "ht 101",
    "ht 131", "–ø–æ–≤—ñ—Ç—Ä–æ–¥—É–≤–∫–∞", "–ø–æ–≤—ñ—Ç—Ä–æ–¥—É–≤", "–ø–∏–ª–æ—Å–æ—Å", "br 200", "br 350",
    "br 430", "br 600", "br 700", "br 800", "–ø–æ–¥—Ä—ñ–±–Ω—é–≤–∞—á", "gh 370", "gh 460",
    "–º–∏–π–∫–∞", "reh 120", "reh 160", "–º–æ—Ç–æ–±—É—Ä", "bt 121", "bt 131",
    "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä stihl", "–ª–∞–Ω—Ü—é–≥", "—à–∏–Ω–∞", "–º–∞—Å–ª–æ stihl", "–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏",
    "—Å—Ç–∞—Ä—Ç–µ—Ä", "—Ñ—ñ–ª—å—Ç—Ä", "—Å–≤—ñ—á–∫–∞"
]

seen_ids = set()
last_status_time = time.monotonic()
last_offset = None  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π offset –¥–ª—è –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ—ó —Ä–æ–±–æ—Ç–∏

# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
def send_message(text):
    for chat_id in CHAT_IDS:
        try:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            data = {"chat_id": chat_id, "text": text}
            response = requests.post(url, data=data)
            if response.status_code != 200:
                print(f"‚ùå –ù–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {chat_id}:", response.text)
            else:
                print(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ {chat_id}: {text[:50]}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ {chat_id}:", e)

# –ü–æ—à—É–∫ —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –Ω–∞ Prozorro
def search_prozorro():
    global last_offset
    url = "https://public.api.openprocurement.org/api/2.5/tenders"

    params = {
        "limit": 100,  # —â–æ–± –Ω–µ –∑–∞–±–∏–≤–∞—Ç–∏ —Å–µ—Ä–≤–µ—Ä
        "descending": "1"
    }
    if last_offset:
        params["offset"] = last_offset

    try:
        response = requests.get(url, params=params, timeout=10)
        if response.status_code != 200:
            print("‚ùå –ó–∞–ø–∏—Ç –Ω–µ –≤–¥–∞–≤—Å—è:", response.status_code)
            return []

        json_data = response.json()
        last_offset = json_data.get("next_page", {}).get("offset", last_offset)
        tenders = json_data.get("data", [])

        print(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ {len(tenders)} —Ç–µ–Ω–¥–µ—Ä—ñ–≤.")
        return tenders

    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ:", e)
        return []

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–∞–º —Ç–∞ —Ä–µ–≥—ñ–æ–Ω—É
def is_relevant(tender):
    text = (tender.get("title", "") + " " + tender.get("description", "")).lower()
    # region = tender.get("procuringEntity", {}).get("address", {}).get("region", "").lower()
    # return any(keyword in text for keyword in KEYWORDS) and TARGET_REGION in region
    return any(keyword in text for keyword in KEYWORDS)

# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def format_message(tender):
    return (
        f"üîî –í–∏—è–≤–ª–µ–Ω–∞ –∑–∞–∫—É–ø—ñ–≤–ª—è ST–ÜHL-—Ç–∏–ø—É!\n"
        f"üìå –ù–∞–∑–≤–∞: {tender.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}\n"
        f"üè¢ –ó–∞–º–æ–≤–Ω–∏–∫: {tender.get('procuringEntity', {}).get('name', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"üåç –û–±–ª–∞—Å—Ç—å: {tender.get('procuringEntity', {}).get('address', {}).get('region', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"üîó https://prozorro.gov.ua/tender/{tender.get('tenderID', tender.get('id'))}"
    )

# –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏
def main():
    global last_status_time
    while True:
        try:
            now = time.monotonic()

            # –†–∞–∑ –Ω–∞ –¥–æ–±—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –ø—Ä–æ–≥—Ä–∞–º–∞ –ø—Ä–∞—Ü—é—î
            if now - last_status_time > STATUS_INTERVAL:
                send_message("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–∞ –ø—Ä–∞—Ü—é—î ‚Äî " + datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                last_status_time = now

            print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–Ω–¥–µ—Ä—ñ–≤...")
            tenders = search_prozorro()

            for tender in tenders:
                tid = tender.get("id")
                if tid and tid not in seen_ids:
                    if is_relevant(tender):
                        send_message(format_message(tender))
                    seen_ids.add(tid)

        except Exception as e:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ:", e)

        time.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    main()





















