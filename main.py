import requests
import time
import os
from datetime import datetime, timezone
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —Ç–∞ —á–∞—Ç—ñ–≤ –∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_IDS = ["197172707"]  # ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫–∏–º –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

# –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É —É –Ω–∞–∑–≤—ñ/–æ–ø–∏—Å—ñ
KEYWORDS = [
    "stihl", "—à—Ç–∏–ª—å", "–º–æ—Ç–æ–ø–∏–ª–∞", "–±–µ–Ω–∑–æ–ø–∏–ª–∞", "–≥–∞–∑–æ–Ω–æ–∫–æ—Å–∞—Ä–∫–∞",
    "–º–æ—Ç–æ–∫–æ—Å–∞", "—Ç—Ä–∏–º–º–µ—Ä", "–∫—É—â–æ—Ä—ñ–∑", "–ø–æ–≤—ñ—Ç—Ä–æ–¥—É–≤–∫–∞", "–ø–∏–ª–æ—Å–æ—Å",
    "–º–æ—Ç–æ–∫—É–ª—å—Ç–∏–≤–∞—Ç–æ—Ä", "—Å–∞–¥–æ–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∞", "–∑–∞–ø–∞—Å–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ stihl",
    "–ª–∞–Ω—Ü—é–≥", "—à–∏–Ω–∞", "—Ñ—ñ–ª—å—Ç—Ä stihl", "–æ–ª–∏–≤–∞ stihl"
]

# –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–¥—ñ–≤ –î–ö
DK_CODES = [
    "16100000-6", "16160000-4", "16162000-8", "16162100-9", "16162200-0",
    "16300000-8", "16310000-1", "16311000-8", "16311100-9", "16320000-4",
    "16340000-0", "16800000-3", "16810000-6", "16820000-9", "16830000-2",
    "16840000-5", "42650000-7", "42652000-1", "42660000-0", "44510000-8",
    "44511000-5", "44512000-2", "44512600-6", "44514000-6", "09211000-1",
    "09211100-2", "09211200-3", "42990000-2", "42993200-5", "42994000-9",
    "31400000-0", "31420000-6", "31421000-3", "39713430-2", "39713431-9",
    "39713432-6"
]

# –°–ø–∏—Å–æ–∫ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤
sent_tenders = set()

def send_telegram_message(text):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram"""
    for chat_id in CHAT_IDS:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
        requests.post(url, data=payload)

def fetch_new_tenders():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –∑ Prozorro"""
    url = "https://public.api.openprocurement.org/api/2.5/tenders?feed=changes&mode=real_time"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json().get("data", [])
        return data
    return []

def process_tender(tender_id):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–Ω–¥–µ—Ä—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∞–±–æ –∫–æ–¥ –î–ö"""
    tender_url = f"https://public.api.openprocurement.org/api/2.5/tenders/{tender_id}"
    response = requests.get(tender_url)
    if response.status_code != 200:
        return
    
    tender = response.json().get("data", {})
    title = tender.get("title", "").lower()
    description = tender.get("description", "").lower()
    cpv_code = tender.get("items", [{}])[0].get("classification", {}).get("id", "")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∞–±–æ –∫–æ–¥ –î–ö
    if any(keyword in title or keyword in description for keyword in KEYWORDS) or cpv_code in DK_CODES:
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        tender_link = f"https://prozorro.gov.ua/tender/{tender_id}"
        message = f"üÜï <b>–ù–æ–≤–∏–π —Ç–µ–Ω–¥–µ—Ä</b>\n\n" \
                  f"üìå <b>{tender.get('title')}</b>\n" \
                  f"üìÖ –î–∞—Ç–∞: {tender.get('datePublished')}\n" \
                  f"üìë –ö–æ–¥ –î–ö: {cpv_code}\n" \
                  f"üîó {tender_link}"
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–∞–Ω—ñ—à–µ
        if tender_id not in sent_tenders:
            send_telegram_message(message)
            sent_tenders.add(tender_id)

def main():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏"""
    while True:
        try:
            tenders = fetch_new_tenders()
            for tender in tenders:
                tender_id = tender.get("id")
                if tender_id and tender_id not in sent_tenders:
                    process_tender(tender_id)
            time.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(60)

if __name__ == "__main__":
    main()























