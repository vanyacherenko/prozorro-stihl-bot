import requests
import time
import os
from datetime import datetime, timezone
from dotenv import load_dotenv

# üîê –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ —ñ–∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# üîÅ –Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏
CHECK_INTERVAL = 5
STATUS_INTERVAL = 3600

# üîç –†–µ–≥—ñ–æ–Ω –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
TARGET_REGION = "—á–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"

# üîë –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É
KEYWORDS = [
    "stihl", "—à—Ç–∏–ª—å", "—à—Ç–∏–ª—å —É–∫—Ä–∞—ó–Ω–∞", "–±–µ–Ω–∑–æ–ø–∏–ª–∞", "–º–æ—Ç–æ–ø–∏–ª–∞", "chainsaw",
    "ms 170", "ms 180", "ms 211", "ms 230", "ms 250", "ms 260", "ms 261",
    "ms 271", "ms 290", "ms 311", "ms 361", "ms 362", "ms 391", "ms 400",
    "ms 441", "ms 461", "ms 462", "ms 500", "ms 500i", "ms 661", "ms 880",
    "msa 120", "msa 140", "msa 160", "msa 200", "msa 220", "–º–æ—Ç–æ–∫–æ—Å–∞", "–∫–æ—Å–∞",
    "trimmer", "—Ç—Ä–∏–º–µ—Ä", "fs 38", "fs 55", "fs 70", "fs 94", "fs 120", "fs 131",
    "fs 250", "fs 260", "fs 360", "fs 410", "fs 460", "fs 490", "–∫—É—â–æ—Ä—ñ–∑",
    "hs 45", "hs 56", "hs 82", "hs 87", "–≤–∏—Å–æ—Ç–æ—Ä—ñ–∑", "ht 75", "ht 101",
    "ht 131", "–ø–æ–≤—ñ—Ç—Ä–æ–¥—É–≤–∫–∞", "–ø–æ–≤—ñ—Ç—Ä–æ–¥—É–≤", "–ø–∏–ª–æ—Å–æ—Å", "br 200", "br 350",
    "br 430", "br 600", "br 700", "br 800", "–ø–æ–¥—Ä—ñ–±–Ω—é–≤–∞—á", "gh 370", "gh 460",
    "–º–∏–π–∫–∞", "reh 120", "reh 160", "–º–æ—Ç–æ–±—É—Ä", "bt 121", "bt 131",
    "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä stihl", "–ª–∞–Ω—Ü—é–≥", "—à–∏–Ω–∞", "–º–∞—Å–ª–æ stihl", "–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏",
    "—Å—Ç–∞—Ä—Ç–µ—Ä", "—Ñ—ñ–ª—å—Ç—Ä", "—Å–≤—ñ—á–∫–∞"
]

# üß† –ü–∞–º'—è—Ç—å –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Ç–µ–Ω–¥–µ—Ä—ñ–≤
seen_ids = set()
last_status_time = time.monotonic()

# üì§ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
def send_message(text):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {"chat_id": CHAT_ID, "text": text}
        response = requests.post(url, data=data)
        if response.status_code != 200:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è:", response.text)
        else:
            print("‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ:", text[:50])
    except Exception as e:
        print("‚ùå –í–∏–Ω—è—Ç–æ–∫ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è:", e)

# üåê –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–Ω–¥–µ—Ä—ñ–≤ –∑ Prozorro
def search_prozorro():
    url = "https://public.api.openprocurement.org/api/2.5/tenders"
    params = {
        "offset": datetime.now(timezone.utc).isoformat(),
        "limit": 1000,
        "descending": "1",
        "mode": "test.exclusion"
    }
    try:
        response = requests.get(url, params=params)
        if response.status_code != 200:
            print("‚ùå –ó–∞–ø–∏—Ç –Ω–µ –≤–¥–∞–≤—Å—è:", response.status_code)
            return []
        return response.json().get("data", [])
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:", e)
        return []

# üïµÔ∏è‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ —Ç–µ–Ω–¥–µ—Ä—É
def is_relevant(tender):
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–∫—Å—Ç—É
    text = (tender.get("title", "") + " " + tender.get("description", "")).lower()
    if not any(keyword in text for keyword in KEYWORDS):
        return False

    # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–≥—ñ–æ–Ω—É
    region = tender.get("procuringEntity", {}).get("address", {}).get("region", "").lower()
    if TARGET_REGION not in region:
        return False

    return True

# üßæ –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def format_message(tender):
    return (
        f"üîî –í–∏—è–≤–ª–µ–Ω–∞ –∑–∞–∫—É–ø—ñ–≤–ª—è ST–ÜHL-—Ç–∏–ø—É!\n"
        f"üìå –ù–∞–∑–≤–∞: {tender.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}\n"
        f"üè¢ –ó–∞–º–æ–≤–Ω–∏–∫: {tender.get('procuringEntity', {}).get('name', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"üåç –û–±–ª–∞—Å—Ç—å: {tender.get('procuringEntity', {}).get('address', {}).get('region', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"üîó https://prozorro.gov.ua/tender/{tender.get('id')}"
    )

# üöÄ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
def main():
    global last_status_time
    while True:
        try:
            now = time.monotonic()

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ "–ø—Ä–æ–≥—Ä–∞–º–∞ –ø—Ä–∞—Ü—é—î" —Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É
            if now - last_status_time > STATUS_INTERVAL:
                send_message("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–∞ –ø—Ä–∞—Ü—é—î ‚Äî " + datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                last_status_time = now

            print("üîé –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–Ω–¥–µ—Ä—ñ–≤...")
            tenders = search_prozorro()

            for tender in tenders:
                tid = tender.get("id")
                if tid and tid not in seen_ids:
                    if is_relevant(tender):
                        send_message(format_message(tender))
                    seen_ids.add(tid)

        except Exception as e:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ:", e)

        time.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    main()















