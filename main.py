import requests
import time
from datetime import datetime, timezone, timedelta

# ======== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è =========
KEYWORDS = [
    "stihl", "—à—Ç–∏–ª—å", "—à—Ç–∏–ª—å —É–∫—Ä–∞—ó–Ω–∞", "–±–µ–Ω–∑–æ–ø–∏–ª–∞", "–º–æ—Ç–æ–ø–∏–ª–∞", "chainsaw",
    "ms 170", "ms 180", "ms 211", "ms 230", "ms 250", "ms 260",
    "ms 261", "ms 271", "ms 290", "ms 311", "ms 361", "ms 362",
    "ms 391", "ms 400", "ms 441", "ms 461", "ms 462", "ms 500", "ms 500i",
    "ms 661", "ms 880", "msa 120", "msa 140", "msa 160", "msa 200", "msa 220",
    "–º–æ—Ç–æ–∫–æ—Å–∞", "–∫–æ—Å–∞", "trimmer", "—Ç—Ä–∏–º–µ—Ä", "fs 38", "fs 55", "fs 70", "fs 94",
    "fs 120", "fs 131", "fs 250", "fs 260", "fs 360", "fs 410", "fs 460", "fs 490",
    "–∫—É—â–æ—Ä—ñ–∑", "–∫—É—â–æ—Ä—ñ–∑–∏", "hs 45", "hs 56", "hs 82", "hs 87", "–≤–∏—Å–æ—Ç–æ—Ä—ñ–∑", "ht 75",
    "ht 101", "ht 131", "–ø–æ–≤—ñ—Ç—Ä–æ–¥—É–≤–∫–∞", "–ø–æ–≤—ñ—Ç—Ä–æ–¥—É–≤", "–ø–∏–ª–æ—Å–æ—Å", "br 200", "br 350",
    "br 430", "br 600", "br 700", "br 800", "—Å–∞–¥–æ–≤–∏–π –ø–æ–¥—Ä—ñ–±–Ω—é–≤–∞—á", "–ø–æ–¥—Ä—ñ–±–Ω—é–≤–∞—á –≥—ñ–ª–æ–∫",
    "gh 370", "gh 460", "–º–∏–π–∫–∞ –≤–∏—Å–æ–∫–æ–≥–æ —Ç–∏—Å–∫—É", "–º–∏–π–∫–∞", "reh 120", "reh 160",
    "–º–æ—Ç–æ–±—É—Ä", "bt 121", "bt 131", "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä stihl", "–ª–∞–Ω—Ü—é–≥", "—à–∏–Ω–∞", "–º–∞—Å–ª–æ stihl",
    "–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ stihl", "—Å—Ç–∞—Ä—Ç–µ—Ä", "—Ñ—ñ–ª—å—Ç—Ä –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏–π", "—Å–≤—ñ—á–∫–∞ –∑–∞–ø–∞–ª—é–≤–∞–Ω–Ω—è"
]

CHECK_INTERVAL = 5  # –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
STATUS_INTERVAL = 3600  # –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É (3600 —Å–µ–∫—É–Ω–¥)
TELEGRAM_TOKEN = "7596129263:AAGPhGmxG7d1ECKAd7SMu8HlBQBboGhCO4M"
CHAT_ID = "1971727077"

seen_ids = set()
last_status_time = datetime.now()

def send_message(text):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {"chat_id": CHAT_ID, "text": text}
        response = requests.post(url, data=data)
        if response.status_code != 200:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è:", response.text)
        else:
            print("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ:", text[:50])
    except Exception as e:
        print("‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è:", e)

def search_prozorro():
    url = "https://public.api.openprocurement.org/api/2.5/tenders"
    params = {
        "offset": datetime.now(timezone.utc).isoformat(),
        "limit": 1000,
        "descending": "1",
        "mode": "test.exclusion"
    }
    try:
        response = requests.get(url, params=params)
        if response.status_code != 200:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:", response.status_code)
            return []
        return response.json().get("data", [])
    except Exception as e:
        print("‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ:", e)
        return []

def is_relevant(tender):
    title = tender.get("title", "").lower()
    description = tender.get("description", "").lower()
    combined_text = title + " " + description
    return any(keyword in combined_text for keyword in KEYWORDS)

def format_message(tender):
    return (
        f"üîî *–í–∏—è–≤–ª–µ–Ω–∞ –∑–∞–∫—É–ø—ñ–≤–ª—è ST–ÜHL-—Ç–∏–ø—É!*\n"
        f"üìå –ù–∞–∑–≤–∞: {tender.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}\n"
        f"üè¢ –ó–∞–º–æ–≤–Ω–∏–∫: {tender.get('procuringEntity', {}).get('name', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"üåç –û–±–ª–∞—Å—Ç—å: {tender.get('procuringEntity', {}).get('address', {}).get('region', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"üîó https://prozorro.gov.ua/tender/{tender.get('id')}"
    )

def main():
    global last_status_time
    while True:
        try:
            now = datetime.now()
            if (now - last_status_time).total_seconds() > STATUS_INTERVAL:
                send_message("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–∞ –ø—Ä–∞—Ü—é—î ‚Äî " + now.strftime("%Y-%m-%d %H:%M:%S"))
                last_status_time = now

            print("üîé –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–∫—É–ø—ñ–≤–µ–ª—å...")
            tenders = search_prozorro()
            for tender in tenders:
                tid = tender["id"]
                if tid in seen_ids:
                    continue
                if is_relevant(tender):
                    msg = format_message(tender)
                    send_message(msg)
                seen_ids.add(tid)
        except Exception as e:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ:", e)
        time.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    main()














